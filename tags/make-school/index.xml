<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Make School on Dacio's Tech Blog</title><link>https://blog.dacio.dev/tags/make-school/</link><description>Recent content in Make School on Dacio's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 May 2019 09:33:28 -0700</lastBuildDate><atom:link href="https://blog.dacio.dev/tags/make-school/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Memory Management</title><link>https://blog.dacio.dev/posts/2019/05/15/python-memory/</link><pubDate>Wed, 15 May 2019 09:33:28 -0700</pubDate><guid>https://blog.dacio.dev/posts/2019/05/15/python-memory/</guid><description>Photo by Tim Gouw on Unsplash
Managing Memory An assignment that Jasmine and I had recently done for my instructor, Alan Davis, at Make School was given a large list of phone routes consisting of their standardized prefixes and costs.
The task was for increasing amounts of routes and phone numbers to find the longest matches and their prices.
Project Readme
Attempts List One being performing linear search on a list of phone numbers because I couldn&amp;rsquo;t figure out a way to perform binary search.</description></item></channel></rss>